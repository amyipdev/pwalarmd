syntax = "proto2";

// All "optional" elements are currently required

// TODO: evaluate a FetchAllGeneral request

message SocketRequest {
    oneof message {
        ChangeGeneralSound cgs = 1;
        ChangePollFrequency cpf = 2;
        SetNotify sn = 3;
        ChangeAppName can = 4;
        FetchGeneralInfo fgi = 5;
        FetchAlarms fa = 6;
        NewAlarm na = 7;
        RemoveAlarm ra = 8;
    }
}

message ChangeGeneralSound {
    optional string newsound = 1;
}

// Must send at least one change
message ChangePollFrequency {
    optional uint64 poll = 1;
    optional uint32 tpfc = 2;
    optional uint32 tsfc = 3;
}

message SetNotify {
    optional bool noti = 1;
}

// This one is actually optional
// Not filling it out = no custom name
message ChangeAppName {
    optional string newname = 1;
}

// Type is mandatory
message FetchGeneralInfo {
    optional GeneralInfoType git = 1;
}

// These should be returned from the runtime env,
// NOT from the config.
enum GeneralInfoType {
    Sound = 1;
    Poll = 2;
    Notify = 3;
    AppName = 4;
    Daemon = 5;
    Tpfc = 6;
    Tsfc = 7;
}

message FetchAlarms {
}

message NewAlarm {
    // required
    optional AlarmInfo al = 1;
}

message RemoveAlarm {
    // required
    optional AlarmInfo al = 1;
}

message SocketResponse {
    oneof message {
        RequestError err = 1;
        RequestSuccess suc = 2;
        RequestSuccessWithData swd = 3;
        RequestSuccessWithAlarms swa = 4;
    }
}

message RequestError {
    optional ErrorReason er = 1;
}

enum ErrorReason {
    ParseFailureError = 0;
    MissingRequiredComponent = 1;
    IllegalEnumOption = 2;
    InternalServerError = 3;
    DoesNotExist = 4;
}

message RequestSuccess {
}

message RequestSuccessWithData {
    oneof message {
        string st = 1;
        uint64 ui = 2;
        bool bl = 3;
        uint32 sui = 4;
    }
}

message RequestSuccessWithAlarms {
    repeated AlarmInfo als = 1;
}

message AlarmInfo {
    optional string title = 1;
    optional string desc = 2;
    // time is mandatory
    // bounded between 0 (00:00:00) and 86399
    // use uint32 instead of duration because we dont
    // need nanosecond precision
    optional uint32 time = 3;
    // length of this can be zero
    repeated string repeat = 4;
    optional string sound = 5;
    optional string icon = 6;
}
